// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "./FractionalizedNFT.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

/**
 * @title RoyaltyManager
 * @dev A contract to manage royalties for fractionalized NFTs
 */
contract RoyaltyManager is Ownable {
    using SafeMath for uint256;
    
    // Reference to the NFT contract
    FractionalizedNFT public nftContract;
    
    // Royalty distribution tracking
    struct RoyaltyInfo {
        uint256 totalReceived;
        uint256 totalDistributed;
        uint256 lastDistributionTime;
    }
    
    // Mapping from token ID to royalty info
    mapping(uint256 => RoyaltyInfo) public royalties;
    
    // Events
    event RoyaltyReceived(uint256 indexed tokenId, address indexed payer, uint256 amount);
    event RoyaltyDistributed(uint256 indexed tokenId, uint256 amount, uint256 fractionOwners);
    
    /**
     * @dev Constructor initializes the royalty manager
     * @param _nftContract The address of the FractionalizedNFT contract
     */
    constructor(address _nftContract) Ownable(msg.sender) {
        nftContract = FractionalizedNFT(_nftContract);
    }
    
    /**
     * @dev Receive royalties for a token
     * @param tokenId The ID of the token
     */
    function payRoyalty(uint256 tokenId) external payable {
        require(msg.value > 0, "Payment amount must be greater than 0");
        
        RoyaltyInfo storage info = royalties[tokenId];
        info.totalReceived = info.totalReceived.add(msg.value);
        
        emit RoyaltyReceived(tokenId, msg.sender, msg.value);
    }
    
    /**
     * @dev Distribute royalties to fraction owners
     * @param tokenId The ID of the token
     */
    function distributeRoyalties(uint256 tokenId) external {
        RoyaltyInfo storage info = royalties[tokenId];
        uint256 availableRoyalties = info.totalReceived.sub(info.totalDistributed);
        require(availableRoyalties > 0, "No royalties to distribute");
        
        // Forward royalties to the NFT contract for distribution
        info.totalDistributed = info.totalDistributed.add(availableRoyalties);
        info.lastDistributionTime = block.timestamp;
        
        // Use assembly for direct value transfer
        address payable nftAddress = payable(address(nftContract));
        assembly {
            let success := call(gas(), nftAddress, availableRoyalties, 0, 0, 0, 0)
            if iszero(success) {
                revert(0, 0)
            }
        }
        
        // Call the distribution function on the NFT contract
        nftContract.distributeRoyalties{value: 0}(tokenId);
        
        emit RoyaltyDistributed(tokenId, availableRoyalties, block.timestamp);
    }
    
    /**
    * @dev Get royalty information for a token
    * @param _tokenId The ID of the token
    * @return totalReceived Total received royalties,
    *          totalDistributed Total distributed royalties,
    *          lastDistributionTime Last distribution time
    */
    function getRoyaltyInfo(uint256 _tokenId) external view returns (
        uint256 totalReceived,
        uint256 totalDistributed,
        uint256 lastDistributionTime
    )
    {
    RoyaltyInfo memory info = royalties[_tokenId];
    return (info.totalReceived, info.totalDistributed, info.lastDistributionTime);
    }
    
    /**
     * @dev Calculate pending royalties for a token
     * @param tokenId The ID of the token
     * @return Pending royalties amount
     */
    function getPendingRoyalties(uint256 tokenId) external view returns (uint256) {
        RoyaltyInfo storage info = royalties[tokenId];
        return info.totalReceived.sub(info.totalDistributed);
    }
    
    /**
     * @dev Update the NFT contract address (only owner)
     * @param _newNftContract The new NFT contract address
     */
    function updateNftContract(address _newNftContract) external onlyOwner {
        require(_newNftContract != address(0), "Invalid contract address");
        nftContract = FractionalizedNFT(_newNftContract);
    }
    
    /**
     * @dev Withdraw any stuck ETH (only owner)
     * @param amount The amount to withdraw
     */
    function withdrawStuckETH(uint256 amount) external onlyOwner {
        require(amount <= address(this).balance, "Insufficient balance");
        payable(owner()).transfer(amount);
    }
    
    /**
     * @dev Fallback function to receive ETH
     */
    receive() external payable {
        // Auto-assign to token ID 1 if no specific token ID provided
        if (msg.value > 0) {
            RoyaltyInfo storage info = royalties[1];
            info.totalReceived = info.totalReceived.add(msg.value);
            emit RoyaltyReceived(1, msg.sender, msg.value);
        }
    }
}
